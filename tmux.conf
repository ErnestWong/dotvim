set -g default-terminal "screen-256color" # set terminal color

set -sg escape-time 0 # change delay time

# remap the leader key to ctrl-space
set-option -g prefix C-space
unbind-key C-b
bind-key C-space send-prefix

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# map split window to ctrl-y and ctrl-t
bind c-y split-window -v
bind c-t split-window -h
bind-key c-r source-file ~/.tmux.conf \; display "Config reloaded!" # ctrl-r to reload config

# map ctrl-i and ctrl-o to switbh b/w windows
bind-key c-i previous-window
bind-key c-o next-window

bind-key c-n command-prompt -p "Name of new window: " "new-window -n '%%'" # ctrl-n for new window

# Use vim keybindings in copy mode
setw -g mode-keys vi

# taken from: https://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# map copy mode to esc key
unbind [
bind Escape copy-mode
